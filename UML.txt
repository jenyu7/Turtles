// Turtles: Allard Peng, Eugene Thomas, and Jennifer Yu 
// APCS1 pd3
// HW56 -- Pointing Your Rocket Upward 
// 2017-01-10

The following is a UML Diagram detailing the inner workings of the Cazador class, an abstract class that will branch out into three different subclasses, 
all of which are integral parts of our final project (the predator class, the prey class, and the empty box class which will inform a user of where both 
predators and prey are). 

public abstract class Cazador () { 

	This is the abstract superclass Cazador. It will result in the creating of various methods and instance variables that will be present in 
	predators, prey, and blank spaces. 
	
	Instance Variables: 
		
		protected int numPreds; // The amount of predators in the neighboring grid positions
		protected int numPrey; // The amount of prey in the neighboring grid positions
        protected double spawn; // The percent chance of spawn for the given character. 
		protected String retStr = ""; // The string representation that will be printed when a box is selected 
		protected String name = ""; // To humanize the predators and prey, we gave them fun, alliterative names. 
		
	Methods: 
	
		public abstract void editStr(); // Mutates the retStr attribute to express a string that displays the number of predators and the number of prey. 
		public abstract String toString(); // A glorified accessor method for retStr. 

} 

public class you () { 

	This is the class the contains the information for a given player of the game. 
		
		Instance Variables: 
			int HP; // Health 
			int catchPoints; // Counts how much prey you have caught. 
			boolean winner; // When true, the game is over. 
			
		Methods: 
			public int getHP(); // Accessor for the amount of HP left. 
			public void setHP(Predator preddy); // Changes the HP relative to the predator that you "catch". 
			public int getCP(); // Accessor for Catch Points. 
			public void setCP(Prey pray); // Changes CP relative to which prey you catch. 
			public boolean didYaWin (); // Accessor for winner boolean. 
			public void setWin (); // Mutator for winner boolean. 
	
}

public class Predator implements Cazador () { 

	This is the subclass for the Predator. 
	
	Utilizes: 
		numPreds
		numPrey
		spawn
		retStr
		name 
		editStr
		toString() 
	
	New: 
		public int damage; // The amount of HP you cause the player to lose (predator).
		public int getDamage(); // Accessor for damage. 
		
}

public class Prey implements Cazador () { 

	This is the subclass for the Prey. 
	
	Utilizes: 
		numPreds
		numPrey
		spawn
		retStr
		name 
		editStr
		toString() 

	New: 
		public int CP; // The amount of catch points for each prey. 
		public int getCP(); // Accessor for CP. 
}

public class Empty implements Cazador () { 

	This is the subclass for the squares in the 2D Array that don't hold 
	
	Utilizes: 
		numPreds 
		numPrey
		retStr
		editStr
		toString()
		
	New: 
		N/A
}